import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
 
 
public class LinuxCommands {
	public printOutput getStreamWrapper(InputStream is, String type) {
		return new printOutput(is, type);
	}
 
	public static void main(String[] args) {
 
		Runtime rt = Runtime.getRuntime();
		LinuxCommands rte = new LinuxCommands();
		printOutput errorReported, outputMessage;
		
		
		try {
			Process proc = rt.exec("ls -l /Library");
			System.out.print("ls command\n");
			errorReported = rte.getStreamWrapper(proc.getErrorStream(), "ERROR");
			outputMessage = rte.getStreamWrapper(proc.getInputStream(), "OUTPUT");
			errorReported.start();
			outputMessage.start();
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		
		
		

		try {
			Process proc = rt.exec("cd /Users\\preciousoseghale\\Home");
			System.out.print("\n\ncd command\n");
			errorReported = rte.getStreamWrapper(proc.getErrorStream(), "ERROR");
			outputMessage = rte.getStreamWrapper(proc.getInputStream(), "OUTPUT");
			errorReported.start();
			outputMessage.start();
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		
		
		
		try {
			Process proc = rt.exec("mkdir /Users/preciousoseghale/Desktop/new-folder");
			System.out.print("\n\n");
			errorReported = rte.getStreamWrapper(proc.getErrorStream(), "ERROR");
			outputMessage = rte.getStreamWrapper(proc.getInputStream(), "OUTPUT");
			errorReported.start();
			outputMessage.start();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		
		
		
		try {
			Process proc = rt.exec("rmdir /Users/preciousoseghale/Downloads");
			System.out.print("\n\n");
			errorReported = rte.getStreamWrapper(proc.getErrorStream(), "ERROR");
			outputMessage = rte.getStreamWrapper(proc.getInputStream(), "OUTPUT");
			errorReported.start();
			outputMessage.start();
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
		
 
		
		
		
		
		try {
			Process proc = rt.exec("cp /Users/preciousoseghale/Desktop/");
			System.out.print("\n\n");
			errorReported = rte.getStreamWrapper(proc.getErrorStream(), "ERROR");
			outputMessage = rte.getStreamWrapper(proc.getInputStream(), "OUTPUT");
			errorReported.start();
			outputMessage.start();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
				
		
		
		
	}
	
	
 
	private class printOutput extends Thread {
		InputStream is = null;
 
		printOutput(InputStream is, String type) {
			this.is = is;
		}
 
		public void run() {
			String s = null;
			try {
				BufferedReader br = new BufferedReader(
						new InputStreamReader(is));
				while ((s = br.readLine()) != null) {
					System.out.println(s);
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
	}
}
